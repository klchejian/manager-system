<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:component-scan base-package="com.server" />
	<mvc:annotation-driven />


	<bean id="testAspect" class="com.server.advice.TestAspect"></bean>

	<aop:config>
		<aop:aspect id = "testServiceAspect" ref="testAspect">
			<aop:pointcut expression="execution(* com.server.service.*.*(..))" id="businessService"/>
			<aop:before method="doBefore" pointcut-ref="businessService"/>
			<aop:after  method="doAfter"  pointcut-ref="businessService"/>
			<aop:around method="doAround" pointcut-ref="businessService"/>
		</aop:aspect>
	</aop:config>

	<!-- <mvc:resources mapping="/statics/**" location="/statics/" />
	<mvc:resources mapping="/upload/" location="/upload/" />  -->
	
	<!-- <mvc:resources mapping="/WEB-INF/resource/assets/**" location="/WEB-INF/resource/assets/" />
	<mvc:resources mapping="/WEB-INF/resource/Css/**" location="/WEB-INF/resource/Css/" />
	<mvc:resources mapping="/WEB-INF/resource/front/**" location="/WEB-INF/resource/front/" />
	<mvc:resources mapping="/WEB-INF/resource/Images/**" location="/WEB-INF/resource/Images/" />
	<mvc:resources mapping="/WEB-INF/resource/Js/**" location="/WEB-INF/resource/Js/" /> -->
	
	<mvc:resources mapping="/assets/**" location="/WEB-INF/resource/assets/" />
	<mvc:resources mapping="/Css/**" location="/WEB-INF/resource/Css/" />
	<mvc:resources mapping="/front/**" location="/WEB-INF/resource/front/" />
	<mvc:resources mapping="/Images/**" location="/WEB-INF/resource/Images/" />
	<mvc:resources mapping="/Js/**" location="/WEB-INF/resource/Js/" />
	
	<!-- <mvc:resources location="/" mapping="/**"/> -->
	<mvc:resources location="/" mapping="/*.jsp"/>
	<!-- <mvc:resources location="/" mapping="/*.html"/> -->


 <context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!--  配置myBatis的sqlSessionFactory -->
	<bean id = "sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:com/server/mappers/*.xml"/>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.server.mappers"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>


	<!--视图解释器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- <property name="prefix" value="/WEB-INF/"/> -->
		<property name="suffix" value=".jsp" />
		<!-- <property name="requestContextAttribute" value="request"></property> -->
		<!-- <property name="contentType" value="text/html;charset=UTF-8"></property> -->
	</bean>

	<!-- JDBC事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
<!-- 配置xml声明式事务需要下面的 -->
<!-- 	
	 配置事务通知
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>	

 	
	 配置事务切面
	<aop:config>
		配置切点
		<aop:pointcut expression="execution(* com.server.service.*.*(..))" id="serviceMethod"/>
		配置事务通知
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
	 -->
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"></property>
	</bean>
	
	
	 
	 
	 
	<!--  
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/backend/*" />-->
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<!-- <bean class="com.acce.server.user.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>-->
</beans>